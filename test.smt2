(set-logic QF_UFBV) 
 
(declare-fun A () (_ BitVec 4)) 
(declare-fun B () (_ BitVec 4)) 
(declare-fun C () (_ BitVec 4)) 
(declare-fun D () (_ BitVec 4)) 
(declare-fun E () (_ BitVec 4)) 
(declare-fun F () (_ BitVec 4)) 
(declare-fun G () (_ BitVec 4)) 
(declare-fun H () (_ BitVec 4)) 
 
(declare-fun get-interpolant (Bool Bool) Bool)

(assert (! (and true
     (bvuge A #x1)
     (= B #x0)
     (= C #x0)
     (= D #x0)
     (= E #x0)
     (= F #x0)
     (= G #x0)
     (bvuge A #x1)
     (= B #x0)
     (= C #x0)
     (= D #x0)
     (= E #x0)
     (= F #x0)
     (= G #x0)
     (bvuge A #x1)
     (= B #x0)
     (= C #x0)
     (= D #x0)
     (= E #x0)
     (= F #x0)
     (= G #x0)
     (bvuge A #x1)
     (= B #x0)
     (= C #x0)
     (= D #x0)
     (= E #x0)
     (= F #x0)
     (= G #x0)
     (bvuge A #x1)) :named formulaA))
(assert (! (let ((a!1 (bvuge (bvsub #x0 (bvmul (bvmul #x1 #x1) H)) #x1))
      (a!2 (bvadd #x0 (bvsub #x0 (bvmul (bvmul #x1 #x1) F)) G))
      (a!3 (bvuge (bvsub #x0 (bvmul (bvmul #x1 #x1) F)) (bvsub #x0 #x1)))
      (a!4 (bvuge (bvsub #x0 (bvmul (bvmul #x1 #x1) C)) (bvsub #x0 #x1))))
  (and true
       (bvuge A #x0)
       (bvuge B #x0)
       (bvuge C #x0)
       (bvuge D #x0)
       (bvuge E #x2)
       (bvuge F #x0)
       a!1
       (bvuge a!2 #x0)
       a!3
       a!4
       (bvuge (bvadd #x0 (bvmul #x1 #x2 A) F G) #x2))) :named formulaB))

(check-sat)

(assert (get-interpolant formulaA formulaB))
